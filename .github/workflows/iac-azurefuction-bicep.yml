name: Deploy API to Azure Function (PoC)

on: workflow_dispatch

env:
  AZURE_RG: ${{ secrets.AZURE_RG }}
  QUEUE_NAME: ${{ secrets.QUEUE_NAME}}
  SERVICEBUS_CONNECTION_STRING: ${{ secrets.SERVICEBUS_CS}}
  AZURE_FUNCTIONAPP_NAME: apisendorders  # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '10.x' 

jobs:

  create-azure-rg:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0 # Optional
          inlineScript: |
            az group create --location eastus -n $AZURE_RG


  deploy-bicep-template:
    if: ${{ success() }}
    needs: create-azure-rg
    runs-on: ubuntu-latest
    steps:

      # Checkout code
    - uses: actions/checkout@main

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy Bicep template
    - name: Run Bicep deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./IaC/main.bicep
        parameters: ./IaC/azuredeploy.parameters.json


  update-functionapp-settings:
    if: ${{ success() }}
    needs: deploy-bicep-template
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0 # Optional
          inlineScript: |
            az functionapp config appsettings set --name $AZURE_FUNCTIONAPP_NAME --resource-group $AZURE_RG --settings "SERVICEBUS_CONNECTION_STRING=$SERVICEBUS_CONNECTION_STRING"
            az functionapp config appsettings set --name $AZURE_FUNCTIONAPP_NAME --resource-group $AZURE_RG --settings "QUEUE_NAME=$QUEUE_NAME"
  
  build-and-deploy-api:
    if: ${{ success() }}
    needs: update-functionapp-settings
    runs-on: windows-latest
    environment: PoC
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Node ${{ env.NODE_VERSION}} Environment
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 'Resolve Project Dependencies Using Npm'
      shell: pwsh
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        npm run build --if-present
        npm run test --if-present
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'